plugins {
    id "java"
    id "signing"
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "com.griefdefender"
archivesBaseName = "GriefDefender-Bukkit"
version = version

project.ext.getGitHash = {
    def command = Runtime.getRuntime().exec("git rev-parse --short HEAD")
    def result = command.waitFor()
    return (result == 0) ? command.inputStream.text.trim() : "nogit"
}

configurations {
    provided {
        compile.extendsFrom(provided)
    }

    compileJava.dependsOn(":GriefDefenderAPI:build")
}

repositories {
    jcenter()
    maven {
        name = "glaremasters-bloodshot"
        url = "https://repo.glaremasters.me/repository/bloodshot"
    }
    maven {
        name = "glaremasters-public"
        url = "https://repo.glaremasters.me/repository/public"
    }
    maven {
        name = "jitpack"
        url = "https://jitpack.io"
    }
    maven {
        name = "papermc"
        url = "https://papermc.io/repo/repository/maven-public"
    }
    maven {
        name = "sk89q"
        url = "https://maven.sk89q.com/repo"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/repositories/snapshots"
    }
    maven {
        name = "spigotmc"
        url = "https://hub.spigotmc.org/nexus/content/repositories/snapshots"
    }
    maven {
        name = "spongepowered"
        url = "https://repo.spongepowered.org/maven"
    }
}

dependencies {
    // Blood is using internal Bukkit classes within the adapter
    provided(fileTree(dir: "./libs/", include: ["spigot-*.jar"]))
    provided(project(path: ":GriefDefenderAPI"))
    provided("aopalliance:aopalliance:1.0")
    provided("co.aikar:Table:1.0.0-SNAPSHOT")
    provided("co.aikar:acf-bukkit:0.5.0-SNAPSHOT")
    provided("co.aikar:acf-core:0.5.0-SNAPSHOT")
    provided("co.aikar:acf-jda:0.5.0-SNAPSHOT")
    provided("co.aikar:acf-paper:0.5.0-SNAPSHOT")
    provided("co.aikar:locales:1.0-SNAPSHOT")
    provided("co.aikar:minecraft-timings:1.0.4")
    provided("com.flowpowered:flow-math:1.0.3")
    provided("com.github.ben-manes.caffeine:caffeine:2.7.0")
    provided("com.github.MilkBowl:VaultAPI:1.7")
    provided("com.google.inject:guice:4.1.0")
    provided("com.griefdefender:adapter:1.14.4-SNAPSHOT")
    // provided("com.griefdefender:api:1.0.0")
    provided("com.sk89q.worldedit:worldedit-bukkit:7.0.0")
    provided("com.sk89q.worldguard:worldguard-bukkit:7.0.0")
    provided("com.squareup.okhttp3:okhttp:3.14.2")
    provided("com.squareup.okio:okio:2.2.2")
    provided("com.typesafe:config:1.3.1")
    provided("commons-io:commons-io:2.6")
    provided("it.unimi.dsi:fastutil:8.2.3")
    provided("javax.inject:javax.inject:1")
    provided("me.lucko.luckperms:luckperms-api:4.4")
    provided("me.lucko:jar-relocator:1.3")
    provided("net.jodah:expiringmap:0.5.9")
    provided("net.kyori:event-api:3.0.0")
    provided("net.kyori:event-method-asm:3.0.0")
    provided("net.kyori:event-method:3.0.0")
    provided("net.kyori:text-adapter-bukkit:3.0.2")
    provided("net.kyori:text-adapter-bungeecord:3.0.2")
    provided("net.kyori:text-adapter-spongeapi:3.0.2")
    provided("net.kyori:text-api:3.0.1")
    provided("net.kyori:text-serializer-gson:3.0.1")
    provided("net.kyori:text-serializer-legacy:3.0.1")
    provided("net.kyori:text-serializer-plain:3.0.1")
    provided("org.apache.commons:commons-lang3:3.9")
    provided("org.jetbrains.kotlin:kotlin-stdlib:1.3.31")
    provided("org.ow2.asm:asm-debug-all:5.2")
    // provided("org.spigotmc:spigot-api:1.14.4-R0.1-SNAPSHOT")
    provided("org.spongepowered:configurate-core:3.7-SNAPSHOT")
    provided("org.spongepowered:configurate-gson:3.7-SNAPSHOT")
    provided("org.spongepowered:configurate-hocon:3.7-SNAPSHOT")
    provided("org.spongepowered:configurate-yaml:3.7-SNAPSHOT")
}

jar {
    manifest {
        attributes(
                "Implementation-Title": "GriefDefender",
                "Implementation-Version": project.version,
                "Git-Hash": project.ext.getGitHash()
        )
    }

    from {
        (configurations.compile - configurations.provided).findAll({
            it.isDirectory() || it.name.endsWith(".jar")
        }).collect({
            it.isDirectory() ? it : zipTree(it)
        })
    }
}

processResources {
    from("LICENSE")
    rename("LICENSE", "LICENSE-" + archivesBaseName)

    from (sourceSets.main.resources.srcDirs) {
        include("plugin.yml")
        expand("version": version)
    }
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        configurations.archives.allArtifacts.files.each {
            ant.signjar(
                jar: it,
                alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified: project.property("signing.preserveLastModified"),
                tsaurl: project.property("signing.timestampAuthority"),
                digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: " + it.name)

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: " + it.name)
        }
    }
}